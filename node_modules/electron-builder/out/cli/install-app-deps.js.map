{"version":3,"file":"install-app-deps.js","sourceRoot":"","sources":["../../src/cli/install-app-deps.ts"],"names":[],"mappings":"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","sourcesContent":["#! /usr/bin/env node\n\nimport BluebirdPromise from \"bluebird-lst\"\nimport { log, use } from \"builder-util\"\nimport { printErrorAndExit } from \"builder-util/out/promise\"\nimport { computeDefaultAppDirectory, getConfig } from \"electron-builder-lib/out/util/config\"\nimport { getElectronVersion } from \"electron-builder-lib/out/util/electronVersion\"\nimport { createLazyProductionDeps } from \"electron-builder-lib/out/util/packageDependencies\"\nimport { installOrRebuild } from \"electron-builder-lib/out/util/yarn\"\nimport { readJson } from \"fs-extra-p\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport { orNullIfFileNotExist } from \"read-config-file\"\nimport yargs from \"yargs\"\n\ndeclare const PACKAGE_VERSION: string\n\n/** @internal */\nexport function configureInstallAppDepsCommand(yargs: yargs.Yargs): yargs.Yargs {\n  // https://github.com/yargs/yargs/issues/760\n  // demandOption is required to be set\n  return yargs\n    .option(\"platform\", {\n      choices: [\"linux\", \"darwin\", \"win32\"],\n      default: process.platform,\n      description: \"The target platform\",\n    })\n    .option(\"arch\", {\n      choices: [\"ia32\", \"x64\", \"all\"],\n      default: process.arch,\n      description: \"The target arch\",\n    })\n}\n\n/** @internal */\nexport async function installAppDeps(args: any) {\n  try {\n    log.info({version: PACKAGE_VERSION}, \"electron-builder\")\n  }\n  catch (e) {\n    // error in dev mode without babel\n    if (!(e instanceof ReferenceError)) {\n      throw e\n    }\n  }\n\n  const projectDir = process.cwd()\n  const packageMetadata = new Lazy(() => orNullIfFileNotExist(readJson(path.join(projectDir, \"package.json\"))))\n  const config = await getConfig(projectDir, null, null, packageMetadata)\n  const muonVersion = config.muonVersion\n  const results = await BluebirdPromise.all<string>([\n    computeDefaultAppDirectory(projectDir, use(config.directories, it => it!.app)),\n    muonVersion == null ? getElectronVersion(projectDir, config, packageMetadata) : Promise.resolve(muonVersion),\n  ])\n\n  // if two package.json â€” force full install (user wants to install/update app deps in addition to dev)\n  await installOrRebuild(config, results[0], {\n    frameworkInfo: {version: results[1], useCustomDist: muonVersion == null},\n    platform: args.platform,\n    arch: args.arch,\n    productionDeps: createLazyProductionDeps(results[0]),\n  }, results[0] !== projectDir)\n}\n\nfunction main() {\n  return installAppDeps(configureInstallAppDepsCommand(yargs).argv)\n}\n\nif (process.mainModule === module) {\n  log.warn(\"please use as subcommand: electron-builder install-app-deps\")\n  main()\n    .catch(printErrorAndExit)\n}"]}
